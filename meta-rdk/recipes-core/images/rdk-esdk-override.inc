do_populate_sdk_ext_prepend() {
    builddir = d.getVar('TOPDIR')
    if os.path.exists(builddir + '/conf/templateconf.cfg'):
        with open(builddir + '/conf/templateconf.cfg', 'w') as f:
            f.write('meta/conf\n')
}

do_populate_sdk_ext_append() {
    if any(machine in d.getVar('MACHINEOVERRIDES', True) for machine in ["cscope-xb7", "arrisxb6p2atom-sdk72x", "arrisxb6p2arm-sdk72x"]):
        #Remove the templateconf file which is altered by populate_sdk_ext.bbclass, otherwise it will affect the second build (arm build)
        #The file will be autogenerated again if it don't exist.
        if os.path.exists(builddir + '/conf/templateconf.cfg'):
            os.remove(builddir + '/conf/templateconf.cfg')
}

python copy_buildsystem_prepend() {
    #change to add generic layer inside eSDK environment.
    if any(machine in d.getVar('MACHINEOVERRIDES', True) for machine in ["cscope-xb7", "arrisxb6p2atom-sdk72x", "arrisxb6p2arm-sdk72x"]):
        d.appendVar('BBLAYERS', ' ' + d.getVar('RDKROOT') + '/generic/')
}

#Define RDKROOT for eSDK environment
python copy_buildsystem_append() {
    baseoutpath = d.getVar('SDK_OUTPUT') + '/' + d.getVar('SDKPATH')
    with open(baseoutpath + '/conf/bblayers.conf', 'a') as f:
        f.write('RDKROOT = "$' + '{TOPDIR}/layers" \n' )

    if any(machine in d.getVar('MACHINEOVERRIDES', True) for machine in ["cscope-xb7", "arrisxb6p2atom-sdk72x", "arrisxb6p2arm-sdk72x"]):
        #Remove the generic layer from bblayers.conf inorder to redo the changes done to package generic layer as this file is reused in other places.
        if os.path.exists(baseoutpath + '/conf/bblayers.conf'):
            with open(baseoutpath + '/conf/bblayers.conf', 'r') as f:
                bblayers = f.read()
            bblayers = bblayers.replace('    $' + '{SDKBASEMETAPATH}/layers/generic \\\n','')
            with open(baseoutpath + '/conf/bblayers.conf', 'w') as f:
                f.write(bblayers)

    #To do: The kernel compilation(do_prepare_image) creates stripped.bin and .dtb files in image folder. In ESDK, we are not recompiling the Kernel, and also to avoid recompiling we are copying it to destination path.
    builddir = d.getVar('TOPDIR')
    if "xle-wnc" in d.getVar('MACHINEOVERRIDES', True):
        if os.path.exists(builddir + '/tmp/deploy/images/xle-wnc/vmlinux-xle-wnc.stripped.bin'):
            bb.utils.mkdirhier(baseoutpath + '/tmp/deploy/images/xle-wnc')
            shutil.copy(builddir + '/tmp/deploy/images/xle-wnc/vmlinux-xle-wnc.stripped.bin', baseoutpath + '/tmp/deploy/images/xle-wnc/vmlinux-xle-wnc.stripped.bin')
            shutil.copy(builddir + '/tmp/deploy/images/xle-wnc/WNXL11BWL.dtb', baseoutpath + '/tmp/deploy/images/xle-wnc/WNXL11BWL.dtb')
}

#DVM logs for eSDK environment
python copy_buildsystem_append() {
    baseoutpath = d.getVar('SDK_OUTPUT') + '/' + d.getVar('SDKPATH')
    with open(baseoutpath + '/conf/local.conf', 'a') as f:
        f.write('INHERIT += "post-build" \n' )
}
