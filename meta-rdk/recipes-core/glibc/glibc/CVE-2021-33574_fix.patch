##########################################
Source: upstream
	https://sourceware.org/bugzilla/show_bug.cgi?id=27896
        https://sourceware.org/git/?p=glibc.git;a=commit;h=42d359350510506b87101cf77202fefcbfc790cb
        https://sourceware.org/git/?p=glibc.git;a=commit;h=217b6dc298156bdb0d6aea9ea93e7e394a5ff091
Date: Wen Oct 03 00:47:17 UTC 2021
From: INTCS-308: MxL Meta  sprint 2108 Delivery
Subject: INTCS-308: MxL Meta  sprint 2108 Delivery
Signed-off-by: Vadym Omelchuk <vomelchuk@maxlinear.com>
##########################################
Index: git/sysdeps/unix/sysv/linux/mq_notify.c
===================================================================
--- git.orig/sysdeps/unix/sysv/linux/mq_notify.c
+++ git/sysdeps/unix/sysv/linux/mq_notify.c
@@ -135,9 +135,12 @@ helper_thread (void *arg)
 	    (void) __pthread_barrier_wait (&notify_barrier);
 	}
       else if (data.raw[NOTIFY_COOKIE_LEN - 1] == NOTIFY_REMOVED)
-	/* The only state we keep is the copy of the thread attributes.  */
-	free (data.attr);
-    }
+    {
+      /* The only state we keep is the copy of the thread attributes.  */
+      pthread_attr_destroy (data.attr);
+      free (data.attr);
+    }
+   }
   return NULL;
 }
 
@@ -259,6 +262,31 @@ mq_notify (mqd_t mqdes, const struct sig
 
       memcpy (data.attr, notification->sigev_notify_attributes,
 	      sizeof (pthread_attr_t));
+
+      struct pthread_attr *source = (struct pthread_attr *) (notification->sigev_notify_attributes);
+      struct pthread_attr *target = (struct pthread_attr *) (data.attr);
+      cpu_set_t *newp;
+      cpu_set_t *cpuset = source->cpuset;
+      size_t cpusetsize = source->cpusetsize;
+
+      /* alloc a new memory for cpuset to avoid use after free */
+      if (cpuset != NULL && cpusetsize > 0)
+      {
+        newp = (cpu_set_t *) malloc (cpusetsize);
+        if (newp == NULL)
+        {
+          free(data.attr);
+          return -1;
+        }
+
+        memcpy (newp, cpuset, cpusetsize);
+        target->cpuset = newp;
+      }
+      else
+      {
+        target->cpuset = NULL;
+        target->cpusetsize = 0;
+      }
     }
 
   /* Construct the new request.  */
@@ -271,8 +299,11 @@ mq_notify (mqd_t mqdes, const struct sig
   int retval = INLINE_SYSCALL (mq_notify, 2, mqdes, &se);
 
   /* If it failed, free the allocated memory.  */
-  if (__glibc_unlikely (retval != 0))
-    free (data.attr);
+   if (retval != 0 && data.attr != NULL)
+    {
+      pthread_attr_destroy (data.attr);
+      free (data.attr);
+    }
 
   return retval;
 }
