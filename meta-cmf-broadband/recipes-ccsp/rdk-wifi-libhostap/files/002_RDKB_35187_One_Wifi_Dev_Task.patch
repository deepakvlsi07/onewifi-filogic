From 02dfa2bb4c793cbcd74437d476e7b52970019ed0 Mon Sep 17 00:00:00 2001
From: apatel599 <aniketnarshibhai_patel@comcast.com>
Date: Tue, 16 Nov 2021 12:19:31 +0000
Subject: [PATCH] RDKB-35187: One Wifi Dev Task

Reason for change: Added this changes due to rdk_wifi_Hal 3_0 code changes.
Test Procedure: None
Risks: Low

Change-Id: I7f490500835b943291775248dcf013d1fe23a8ac
Signed-off-by: apatel599@cable.comcast.com

RDKB-37345: break down eloop_run

Reason for change: break down eloop_run functionally and
execute from rdk-hal code.
Test Procedure: Sta should connect using enterprise authentication
Risks: Low

Change-Id: Ic3a6ccc871df7b69c5a67e2e48c0c1e5ec0e9244
Signed-off-by: Jayanth Rajan <jayanth.rajan@sky.uk>

RDKB-37345: Adding deauth notify callback

Reason for change: Adding deauth notify callback
Test Procedure:
Risks: Low

Change-Id: I77ed392fcfee6b9ddb44c3763829472fd013c41c
Signed-off-by: Yuriy Masechko <Yuriy_Masechko@comcast.com>

RDKB-37345: Cover OneWifi functionality with ifdef

Reason for change: Cover OneWifi functionality with ifdef
Test Procedure:
Risks: Low

Change-Id: I877a33e6a56ccdd7bf8be7beabca46d92f474b95
Signed-off-by: Yuriy Masechko <Yuriy_Masechko@comcast.com>
(cherry picked from commit 19e7f2857b8eacc5cca92384c807fcf02e3316e1)
(cherry picked from commit a564cd28e02391b027b1bcfa22560821bc0eda69)
---

diff --git a/source/hostap-2.9/src/ap/ap_drv_ops.c b/source/hostap-2.9/src/ap/ap_drv_ops.c
index c0ededa..3ad97fc 100755
--- a/source/hostap-2.9/src/ap/ap_drv_ops.c
+++ b/source/hostap-2.9/src/ap/ap_drv_ops.c
@@ -717,6 +717,16 @@
 					reason);
 }
 
+#ifdef RDK_ONEWIFI
+int hostapd_drv_sta_notify_deauth(struct hostapd_data *hapd,
+			   const u8 *addr, int reason)
+{
+	if (!hapd->driver || !hapd->driver->sta_notify_deauth || !hapd->drv_priv)
+		return 0;
+	return hapd->driver->sta_notify_deauth(hapd->drv_priv, hapd->own_addr, addr,
+					reason);
+}
+#endif //RDK_ONEWIFI
 
 int hostapd_drv_sta_disassoc(struct hostapd_data *hapd,
 			     const u8 *addr, int reason)
diff --git a/source/hostap-2.9/src/ap/ap_drv_ops.h b/source/hostap-2.9/src/ap/ap_drv_ops.h
index ca7f7ab..7b8b932 100755
--- a/source/hostap-2.9/src/ap/ap_drv_ops.h
+++ b/source/hostap-2.9/src/ap/ap_drv_ops.h
@@ -98,6 +98,10 @@
 			      const u16 *csa_offs, size_t csa_offs_len);
 int hostapd_drv_sta_deauth(struct hostapd_data *hapd,
 			   const u8 *addr, int reason);
+#ifdef RDK_ONEWIFI
+int hostapd_drv_sta_notify_deauth(struct hostapd_data *hapd,
+			   const u8 *addr, int reason);
+#endif //RDK_ONEWIFI
 int hostapd_drv_sta_disassoc(struct hostapd_data *hapd,
 			     const u8 *addr, int reason);
 int hostapd_drv_send_action(struct hostapd_data *hapd, unsigned int freq,
diff --git a/source/hostap-2.9/src/ap/hostapd.c b/source/hostap-2.9/src/ap/hostapd.c
index bf1975f..8294a1f 100755
--- a/source/hostap-2.9/src/ap/hostapd.c
+++ b/source/hostap-2.9/src/ap/hostapd.c
@@ -1079,7 +1079,11 @@
  * initialized. Most of the modules that are initialized here will be
  * deinitialized in hostapd_cleanup().
  */
+#ifdef RDK_ONEWIFI
+int hostapd_setup_bss(struct hostapd_data *hapd, int first)
+#else
 static int hostapd_setup_bss(struct hostapd_data *hapd, int first)
+#endif
 {
 	struct hostapd_bss_config *conf = hapd->conf;
 	u8 ssid[SSID_MAX_LEN + 1];
diff --git a/source/hostap-2.9/src/ap/hostapd.h b/source/hostap-2.9/src/ap/hostapd.h
index 518c7f1..c4dafbf 100755
--- a/source/hostap-2.9/src/ap/hostapd.h
+++ b/source/hostap-2.9/src/ap/hostapd.h
@@ -650,6 +650,10 @@
 				      enum smps_mode smps_mode,
 				      enum chan_width chan_width, u8 rx_nss);
 
+#ifdef RDK_ONEWIFI
+int hostapd_setup_bss(struct hostapd_data *hapd, int first);
+#endif /* RDK_ONEWIFI */
+
 #ifdef CONFIG_FST
 void fst_hostapd_fill_iface_obj(struct hostapd_data *hapd,
 				struct fst_wpa_obj *iface_obj);
diff --git a/source/hostap-2.9/src/drivers/driver.h b/source/hostap-2.9/src/drivers/driver.h
index 2a8459a..3f98904 100755
--- a/source/hostap-2.9/src/drivers/driver.h
+++ b/source/hostap-2.9/src/drivers/driver.h
@@ -2853,7 +2853,10 @@
 	 */
 	int (*sta_deauth)(void *priv, const u8 *own_addr, const u8 *addr,
 			  u16 reason);
-
+#ifdef RDK_ONEWIFI
+	int (*sta_notify_deauth)(void *priv, const u8 *own_addr, const u8 *addr,
+			  u16 reason);
+#endif //RDK_ONEWIFI
 	/**
 	 * sta_disassoc - Disassociate a station (AP only)
 	 * @priv: Private driver interface data
diff --git a/source/hostap-2.9/src/utils/eloop.c b/source/hostap-2.9/src/utils/eloop.c
index bb375be..9b74818 100755
--- a/source/hostap-2.9/src/utils/eloop.c
+++ b/source/hostap-2.9/src/utils/eloop.c
@@ -606,6 +606,59 @@
 	}
 }
 
+#ifdef RDK_ONEWIFI
+int eloop_sock_table_read_set_fds(fd_set *fds)
+{
+	int i;
+
+	if (eloop.readers.table == NULL)
+		return 0;
+
+	for (i = 0; i < eloop.readers.count; i++) {
+		assert(eloop.readers.table[i].sock >= 0);
+		FD_SET(eloop.readers.table[i].sock, fds);
+	}
+	return 0;
+}
+
+int eloop_sock_table_read_get_biggest_fd(void)
+{
+	int i;
+	int sock_fd = 0;
+
+	if (eloop.readers.table == NULL)
+		return 0;
+
+	for (i = 0; i < eloop.readers.count; i++) {
+		assert(eloop.readers.table[i].sock >= 0);
+		if(sock_fd < eloop.readers.table[i].sock) {
+			sock_fd = eloop.readers.table[i].sock;
+		}
+	}
+	return sock_fd;
+}
+
+void eloop_sock_table_read_dispatch(fd_set *fds)
+{
+	int i;
+
+	if (eloop.readers.table == NULL)
+		return;
+
+	eloop.readers.changed = 0;
+	for (i = 0; i < eloop.readers.count; i++) {
+		if (FD_ISSET(eloop.readers.table[i].sock, fds)) {
+			eloop.readers.table[i].handler(eloop.readers.table[i].sock,
+						eloop.readers.table[i].eloop_data,
+						eloop.readers.table[i].user_data);
+			if (eloop.readers.changed)
+				break;
+		}
+	}
+}
+
+#endif //RDK_ONEWIFI
+
 #endif /* CONFIG_ELOOP_SELECT */
 
 
@@ -952,6 +1005,61 @@
 	return -1;
 }
 
+#ifdef RDK_ONEWIFI
+int eloop_get_timeout_ms(void)
+{
+	struct eloop_timeout *timeout;
+	struct os_reltime tv, now;
+	int timeout_ms = -1;
+
+	if(dl_list_empty(&eloop.timeout))
+	{
+		return timeout_ms;
+	}
+
+	timeout = dl_list_first(&eloop.timeout, struct eloop_timeout,
+					list);
+	if (timeout) {
+		os_get_reltime(&now);
+		if (os_reltime_before(&now, &timeout->time))
+			os_reltime_sub(&timeout->time, &now, &tv);
+		else
+			tv.sec = tv.usec = 0;
+		timeout_ms = tv.sec * 1000 + tv.usec / 1000;
+	}
+	return timeout_ms;
+}
+
+int eloop_timeout_run(void)
+{
+	struct eloop_timeout *timeout;
+	struct os_reltime tv, now;
+
+	if(dl_list_empty(&eloop.timeout))
+	{
+		return 0;
+	}
+
+	/* check if some registered timeouts have occurred */
+	timeout = dl_list_first(&eloop.timeout, struct eloop_timeout,
+				list);
+	if (timeout) {
+		os_get_reltime(&now);
+		if (!os_reltime_before(&now, &timeout->time)) {
+			void *eloop_data = timeout->eloop_data;
+			void *user_data = timeout->user_data;
+			eloop_timeout_handler handler =
+				timeout->handler;
+			eloop_remove_timeout(timeout);
+                        printf("Executing callback\n");
+			handler(eloop_data, user_data);
+		}
+
+	}
+	return 0;
+}
+
+#endif //RDK_ONEWIFI
 
 #ifndef CONFIG_NATIVE_WINDOWS
 static void eloop_handle_alarm(int sig)
diff --git a/source/hostap-2.9/src/utils/eloop.h b/source/hostap-2.9/src/utils/eloop.h
index 04ee6d1..2aa8b5d 100755
--- a/source/hostap-2.9/src/utils/eloop.h
+++ b/source/hostap-2.9/src/utils/eloop.h
@@ -128,6 +128,12 @@
  */
 void eloop_unregister_sock(int sock, eloop_event_type type);
 
+#ifdef RDK_ONEWIFI
+int eloop_sock_table_read_set_fds(fd_set *fds);
+int eloop_sock_table_read_get_biggest_fd(void);
+void eloop_sock_table_read_dispatch(fd_set *fds);
+#endif //RDK_ONEWIFI
+
 /**
  * eloop_register_event - Register handler for generic events
  * @event: Event to wait (eloop implementation specific)
@@ -256,6 +262,11 @@
 			    eloop_timeout_handler handler, void *eloop_data,
 			    void *user_data);
 
+#ifdef RDK_ONEWIFI
+int eloop_get_timeout_ms(void);
+int eloop_timeout_run(void);
+#endif //RDK_ONEWIFI
+
 /**
  * eloop_register_signal - Register handler for signals
  * @sig: Signal number (e.g., SIGHUP)
