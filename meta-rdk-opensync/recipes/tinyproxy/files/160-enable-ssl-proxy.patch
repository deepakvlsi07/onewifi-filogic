---
 src/buffer.c       |   42 +++++++++++++++++---
 src/buffer.h       |    4 -
 src/common.h       |    4 +
 src/conf.c         |    3 -
 src/conns.c        |    6 ++
 src/conns.h        |    6 ++
 src/html-error.c   |    9 +++-
 src/http-message.c |   13 +++---
 src/main.c         |   20 +++++++++
 src/main.h         |    3 +
 src/network.c      |   60 ++++++++++++++++++++++++-----
 src/network.h      |    8 +--
 src/reqs.c         |  108 ++++++++++++++++++++++++++++++++++++-----------------
 src/upstream.c     |    1 
 src/upstream.h     |    1 
 15 files changed, 219 insertions(+), 69 deletions(-)

--- a/src/buffer.c
+++ b/src/buffer.c
@@ -209,10 +209,18 @@ static struct bufline_s *remove_from_buf
  * Takes a connection and returns the number of bytes read.
  */
 #define READ_BUFFER_SIZE (1024 * 2)
-ssize_t read_buffer (int fd, struct buffer_s * buffptr)
+ssize_t read_buffer (int fd, SSL *ssl_conn, struct buffer_s * buffptr)
 {
         ssize_t bytesin;
         unsigned char *buffer;
+        unsigned int valid_ssl = FALSE;
+
+        if (ssl_conn != NULL) {
+                /* Validate the SSL session. */
+                if (SSL_get_fd(ssl_conn) == fd) {
+                        valid_ssl = TRUE;
+                }
+        }
 
         assert (fd >= 0);
         assert (buffptr != NULL);
@@ -228,7 +236,16 @@ ssize_t read_buffer (int fd, struct buff
                 return -ENOMEM;
         }
 
-        bytesin = read (fd, buffer, READ_BUFFER_SIZE);
+        if (valid_ssl) {
+                bytesin = SSL_read(ssl_conn, buffer, READ_BUFFER_SIZE);
+                if (bytesin <= 0) {
+                        log_message (LOG_ERR,
+                                "read_buffer: bytesin[%d]",bytesin);
+                        return -ENOMEM;
+                }
+        } else {
+                bytesin = read (fd, buffer, READ_BUFFER_SIZE);
+        }
 
         if (bytesin > 0) {
                 if (add_to_buffer (buffptr, buffer, bytesin) < 0) {
@@ -268,10 +285,18 @@ ssize_t read_buffer (int fd, struct buff
  * Write the bytes in the buffer to the socket.
  * Takes a connection and returns the number of bytes written.
  */
-ssize_t write_buffer (int fd, struct buffer_s * buffptr)
+ssize_t write_buffer (int fd, SSL *ssl_conn, struct buffer_s * buffptr)
 {
         ssize_t bytessent;
         struct bufline_s *line;
+        unsigned int valid_ssl = FALSE;
+
+        if (ssl_conn != NULL) {
+                /* Validate the SSL session. */
+                if (SSL_get_fd(ssl_conn) == fd) {
+                        valid_ssl = TRUE;
+                }
+        }
 
         assert (fd >= 0);
         assert (buffptr != NULL);
@@ -283,10 +308,13 @@ ssize_t write_buffer (int fd, struct buf
         assert (BUFFER_HEAD (buffptr) != NULL);
         line = BUFFER_HEAD (buffptr);
 
-        bytessent =
-            send (fd, line->string + line->pos, line->length - line->pos,
-                  MSG_NOSIGNAL);
-
+        if (valid_ssl) {
+        	bytessent = SSL_write(ssl_conn, line->string + line->pos, line->length - line->pos);
+        } else {
+                bytessent =
+                        send (fd, line->string + line->pos, line->length - line->pos,
+                                MSG_NOSIGNAL);
+        }
         if (bytessent >= 0) {
                 /* bytes sent, adjust buffer */
                 line->pos += bytessent;
--- a/src/buffer.h
+++ b/src/buffer.h
@@ -34,7 +34,7 @@ extern size_t buffer_size (struct buffer
 extern int add_to_buffer (struct buffer_s *buffptr, unsigned char *data,
                           size_t length);
 
-extern ssize_t read_buffer (int fd, struct buffer_s *buffptr);
-extern ssize_t write_buffer (int fd, struct buffer_s *buffptr);
+extern ssize_t read_buffer (int fd, SSL *ssl_conn, struct buffer_s *buffptr);
+extern ssize_t write_buffer (int fd, SSL *ssl_conn, struct buffer_s *buffptr);
 
 #endif /* __BUFFER_H_ */
--- a/src/common.h
+++ b/src/common.h
@@ -68,6 +68,8 @@
 #  include	<arpa/inet.h>
 #  include	<grp.h>
 #  include	<pwd.h>
+#  include <openssl/ssl.h>
+#  include <openssl/err.h>
 
 /* rest - some oddball headers */
 #ifdef HAVE_VALUES_H
--- a/src/conf.c
+++ b/src/conf.c
@@ -243,7 +243,7 @@ struct {
 #ifdef UPSTREAM_SUPPORT
         STDCONF (upstream,
                  "(" "(none)" WS STR ")|" \
-                 "(" "(http|socks4|socks5)" WS \
+                 "(" "(http|https|socks4|socks5)" WS \
                      "(" USERNAME /*username*/ ":" PASSWORD /*password*/ "@" ")?"
                      "(" IP "|" ALNUM ")"
                      ":" INT "(" WS STR ")?" ")", handle_upstream),
@@ -1054,6 +1054,7 @@ static enum proxy_type pt_from_string(co
 	static const char pt_map[][7] = {
 		[PT_NONE]   = "none",
 		[PT_HTTP]   = "http",
+		[PT_HTTPS]   = "https",
 		[PT_SOCKS4] = "socks4",
 		[PT_SOCKS5] = "socks5",
 	};
--- a/src/conns.c
+++ b/src/conns.c
@@ -133,6 +133,10 @@ void conn_destroy_contents (struct conn_
         if (connptr->reversepath)
                 safefree (connptr->reversepath);
 #endif
+        if (connptr->ssl_conn) {
+            SSL_shutdown (connptr->ssl_conn);
+            SSL_free (connptr->ssl_conn);
+        }
 
         update_stats (STAT_CLOSE);
 }
--- a/src/conns.h
+++ b/src/conns.h
@@ -84,12 +84,18 @@ struct conn_s {
          * Place to store the current per-connection reverse proxy path
          */
         char *reversepath;
+	unsigned int is_reverse_ssl;
 #endif
 
         /*
          * Pointer to upstream proxy.
          */
         struct upstream *upstream_proxy;
+
+        /*
+        * SSL related parameters.
+        */
+        SSL *ssl_conn;
 };
 
 /* expects pointer to zero-initialized struct, set up struct
--- a/src/html-error.c
+++ b/src/html-error.c
@@ -96,19 +96,19 @@ static void varsubst_sendline(struct con
 		size_t l;
 		int st = regexec(re, p, 1, &match, 0);
 		if(st == 0) {
-			if(match.rm_so > 0) safe_write(fd, p, match.rm_so);
+			if(match.rm_so > 0) safe_write(fd, connptr->ssl_conn, p, match.rm_so);
 			l = match.rm_eo - match.rm_so;
 			assert(l>2 && l-2 < sizeof(varname));
 			p += match.rm_so;
 			memcpy(varname, p+1, l-2);
 			varname[l-2] = 0;
 			varval = lookup_variable(connptr->error_variables, varname);
-			if(varval) write_message(fd, "%s", varval);
-			else if(varval && !*varval) write_message(fd, "(unknown)");
-			else safe_write(fd, p, l);
+			if(varval) write_message(fd, connptr->ssl_conn, "%s", varval);
+			else if(varval && !*varval) write_message(fd, connptr->ssl_conn, "(unknown)");
+			else safe_write(fd, connptr->ssl_conn, p, l);
 			p += l;
 		} else {
-			write_message(fd, "%s", p);
+			write_message(fd, connptr->ssl_conn, "%s", p);
 			break;
 		}
 	}
@@ -144,7 +144,8 @@ int send_http_headers (
             "%s"
             "Connection: close\r\n" "\r\n";
 
-        return (write_message (connptr->client_fd, headers,
+        return (write_message (connptr->client_fd, connptr->ssl_conn,
+                               headers,
                                code, message, PACKAGE, VERSION,
                                extra));
 }
@@ -189,7 +190,8 @@ int send_http_error_message (struct conn
         error_file = get_html_file (connptr->error_number);
         if (!(infile = fopen (error_file, "r"))) {
                 char *detail = lookup_variable (connptr->error_variables, "detail");
-                return (write_message (connptr->client_fd, fallback_error,
+                return (write_message (connptr->client_fd, connptr->ssl_conn,
+                                       fallback_error,
                                        connptr->error_number,
                                        connptr->error_string,
                                        connptr->error_string,
--- a/src/http-message.c
+++ b/src/http-message.c
@@ -233,6 +233,7 @@ int http_message_send (http_message_t ms
         time_t global_time;
         unsigned int i;
         struct tm tm_buf;
+        SSL *ssl_conn = NULL;
 
         assert (is_http_message_valid (msg));
 
@@ -245,28 +246,28 @@ int http_message_send (http_message_t ms
                 return -EINVAL;
 
         /* Write the response line */
-        write_message (fd, "HTTP/1.0 %d %s\r\n",
+        write_message (fd, ssl_conn, "HTTP/1.0 %d %s\r\n",
                        msg->response.code, msg->response.string);
 
         /* Go through all the headers */
         for (i = 0; i != msg->headers.used; ++i)
-                write_message (fd, "%s\r\n", msg->headers.strings[i]);
+                write_message (fd, ssl_conn, "%s\r\n", msg->headers.strings[i]);
 
         /* Output the date */
         global_time = time (NULL);
         strftime (timebuf, sizeof (timebuf), "%a, %d %b %Y %H:%M:%S GMT",
                   gmtime_r (&global_time, &tm_buf));
-        write_message (fd, "Date: %s\r\n", timebuf);
+        write_message (fd, ssl_conn, "Date: %s\r\n", timebuf);
 
         /* Output the content-length */
-        write_message (fd, "Content-length: %lu\r\n", (unsigned long) msg->body.length);
+        write_message (fd, ssl_conn, "Content-length: %lu\r\n", (unsigned long) msg->body.length);
 
         /* Write the separator between the headers and body */
-        safe_write (fd, "\r\n", 2);
+        safe_write (fd, ssl_conn, "\r\n", 2);
 
         /* If there's a body, send it! */
         if (msg->body.length > 0)
-                safe_write (fd, msg->body.text, msg->body.length);
+                safe_write (fd, ssl_conn, msg->body.text, msg->body.length);
 
         return 0;
 }
--- a/src/main.c
+++ b/src/main.c
@@ -53,6 +53,8 @@ struct config_s *config;
 static struct config_s configs[2];
 static const char* config_file;
 unsigned int received_sighup = FALSE;   /* boolean */
+const SSL_METHOD *method;
+SSL_CTX *ctx;
 
 static struct config_s*
 get_next_config(void)
@@ -339,6 +341,22 @@ main (int argc, char **argv)
 
         init_stats ();
 
+        /* Global initialization of SSL libraries */
+        SSL_library_init();
+        OpenSSL_add_all_algorithms();
+        SSL_load_error_strings();
+        method = TLS_client_method();  /* Create new client-method instance */
+        if (!method) {
+                ERR_print_errors_fp(stderr);
+                exit (EX_SOFTWARE);
+        }
+
+        ctx = SSL_CTX_new(method);   /* Create new context */
+        if (!ctx) {
+                ERR_print_errors_fp(stderr);
+                exit (EX_SOFTWARE);
+        }
+
         /* If ANONYMOUS is turned on, make sure that Content-Length is
          * in the list of allowed headers, since it is required in a
          * HTTP/1.0 request. Also add the Content-Type header since it
--- a/src/main.h
+++ b/src/main.h
@@ -29,7 +29,10 @@
 #define MAX_IDLE_TIME   (60 * 10)       /* 10 minutes of no activity */
 
 /* Global Structures used in the program */
+
 extern struct config_s *config;
+extern const SSL_METHOD *method;
+extern SSL_CTX *ctx;
 extern unsigned int received_sighup;    /* boolean */
 
 extern int reload_config (int reload_logging);
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -59,7 +59,7 @@
 	reverse-proxy.c reverse-proxy.h \
 	transparent-proxy.c transparent-proxy.h
 tinyproxy_DEPENDENCIES = @ADDITIONAL_OBJECTS@
-tinyproxy_LDADD = @ADDITIONAL_OBJECTS@ -lpthread -lmnl
+tinyproxy_LDADD = @ADDITIONAL_OBJECTS@ -lpthread -lmnl -lssl -lcrypto
 
 if HAVE_GPERF
 conf-tokens.c: conf-tokens-gperf.inc
--- a/src/network.c
+++ b/src/network.c
@@ -32,21 +32,30 @@
  * Write the buffer to the socket. If an EINTR occurs, pick up and try
  * again. Keep sending until the buffer has been sent.
  */
-ssize_t safe_write (int fd, const void *buf, size_t count)
+ssize_t safe_write (int fd, SSL *ssl_conn, const void *buf, size_t count)
 {
         ssize_t len;
         size_t bytestosend;
-	const char *buffer = buf;
+        const char *buffer = buf;
+        unsigned int valid_ssl = FALSE;
 
         assert (fd >= 0);
         assert (buffer != NULL);
         assert (count > 0);
 
         bytestosend = count;
+        if (ssl_conn != NULL) {
+                if (SSL_get_fd(ssl_conn) == fd) {
+                        valid_ssl = TRUE;
+                }
+        }
 
         while (1) {
-                len = send (fd, buffer, bytestosend, MSG_NOSIGNAL);
-
+                if (valid_ssl) {
+                        len = SSL_write (ssl_conn, buffer, bytestosend);
+                } else {
+                        len = send (fd, buffer, bytestosend, MSG_NOSIGNAL);
+                }
                 if (len < 0) {
                         if (errno == EINTR)
                                 continue;
@@ -68,12 +77,24 @@ ssize_t safe_write (int fd, const void *
  * Matched pair for safe_write(). If an EINTR occurs, pick up and try
  * again.
  */
-ssize_t safe_read (int fd, void *buffer, size_t count)
+ssize_t safe_read (int fd, SSL *ssl_conn, void *buf, size_t count)
 {
         ssize_t len;
+        unsigned int valid_ssl = FALSE;
+
+        if (ssl_conn != NULL) {
+                /* Validate the SSL session. */
+                if (SSL_get_fd(ssl_conn) == fd) {
+                        valid_ssl = TRUE;
+                }
+        }
 
         do {
-                len = read (fd, buffer, count);
+                if (valid_ssl) {
+                        len = SSL_read(ssl_conn, buf, count);
+                } else {
+                        len = read (fd, buf, count);
+                }
         } while (len < 0 && errno == EINTR);
 
         return len;
@@ -85,7 +106,7 @@ ssize_t safe_read (int fd, void *buffer,
  * was basically stolen from the snprintf() man page of Debian Linux
  * (although I did fix a memory leak. :)
  */
-int write_message (int fd, const char *fmt, ...)
+int write_message (int fd, SSL *ssl_conn, const char *fmt, ...)
 {
         ssize_t n;
         size_t size = (1024 * 8);       /* start with 8 KB and go from there */
@@ -119,7 +140,7 @@ int write_message (int fd, const char *f
                         buf = tmpbuf;
         }
 
-        if (safe_write (fd, buf, n) < 0) {
+        if (safe_write (fd, ssl_conn, buf, n) < 0) {
                 safefree (buf);
                 return -1;
         }
@@ -139,11 +160,12 @@ int write_message (int fd, const char *f
  */
 #define SEGMENT_LEN (512)
 #define MAXIMUM_BUFFER_LENGTH (128 * 1024)
-ssize_t readline (int fd, char **whole_buffer)
+ssize_t readline (int fd, SSL *ssl_conn, char **whole_buffer)
 {
         ssize_t whole_buffer_len;
         char buffer[SEGMENT_LEN];
         char *ptr;
+        unsigned int valid_ssl = FALSE;
 
         ssize_t ret;
         ssize_t diff;
@@ -155,6 +177,13 @@ ssize_t readline (int fd, char **whole_b
         };
         struct read_lines_s *first_line, *line_ptr;
 
+        if (ssl_conn != NULL) {
+                /* Validate the SSL session. */
+                if (SSL_get_fd(ssl_conn) == fd) {
+                        valid_ssl = TRUE;
+                }
+        }
+
         first_line =
             (struct read_lines_s *) safecalloc (sizeof (struct read_lines_s),
                                                 1);
@@ -165,7 +194,11 @@ ssize_t readline (int fd, char **whole_b
 
         whole_buffer_len = 0;
         for (;;) {
-                ret = recv (fd, buffer, SEGMENT_LEN, MSG_PEEK);
+                if (valid_ssl) {
+                        ret = SSL_peek(ssl_conn, buffer, SEGMENT_LEN);
+                } else {
+                        ret = recv (fd, buffer, SEGMENT_LEN, MSG_PEEK);
+                }
                 if (ret <= 0)
                         goto CLEANUP;
 
@@ -192,7 +225,12 @@ ssize_t readline (int fd, char **whole_b
                         goto CLEANUP;
                 }
 
-                ret = recv (fd, line_ptr->data, diff, 0);
+		if (valid_ssl) {
+			ret = SSL_read(ssl_conn, line_ptr->data, diff);
+		} else {
+			ret = recv (fd, line_ptr->data, diff, 0);
+		}
+
                 if (ret == -1) {
                         goto CLEANUP;
                 }
--- a/src/network.h
+++ b/src/network.h
@@ -21,11 +21,11 @@
 #ifndef TINYPROXY_NETWORK_H
 #define TINYPROXY_NETWORK_H
 
-extern ssize_t safe_write (int fd, const void *buf, size_t count);
-extern ssize_t safe_read (int fd, void *buf, size_t count);
+extern ssize_t safe_write (int fd, SSL *ssl_conn, const void *buf, size_t count);
+extern ssize_t safe_read (int fd, SSL *ssl_conn, void *buf, size_t count);
 
-extern int write_message (int fd, const char *fmt, ...);
-extern ssize_t readline (int fd, char **whole_buffer);
+extern int write_message (int fd, SSL *ssl_conn, const char *fmt, ...);
+extern ssize_t readline (int fd, SSL *ssl_conn, char **whole_buffer);
 
 extern const char *get_ip_string (struct sockaddr *sa, char *buf, size_t len);
 extern int full_inet_pton (const char *ip, void *dst);
--- a/src/reqs.c
+++ b/src/reqs.c
@@ -95,7 +95,7 @@ static int read_request_line (struct con
         ssize_t len;
 
 retry:
-        len = readline (connptr->client_fd, &connptr->request_line);
+        len = readline (connptr->client_fd, connptr->ssl_conn, &connptr->request_line);
         if (len <= 0) {
                 log_message (LOG_ERR,
                              "read_request_line: Client (file descriptor: %d) "
@@ -268,6 +268,7 @@ establish_http_connection (struct conn_s
                 /* host is an IPv6 address literal, so surround it with
                  * [] */
                 return write_message (connptr->server_fd,
+                                      connptr->ssl_conn,
                                       "%s %s HTTP/1.0\r\n"
                                       "Host: [%s]%s\r\n"
                                       "Connection: close\r\n",
@@ -277,6 +278,7 @@ establish_http_connection (struct conn_s
                    connptr->upstream_proxy->type == PT_HTTP &&
                    connptr->upstream_proxy->ua.authstr) {
                 return write_message (connptr->server_fd,
+                                      connptr->ssl_conn,
                                       "%s %s HTTP/1.0\r\n"
                                       "Host: %s%s\r\n"
                                       "Connection: close\r\n"
@@ -286,6 +288,7 @@ establish_http_connection (struct conn_s
                                       connptr->upstream_proxy->ua.authstr);
         } else {
                 return write_message (connptr->server_fd,
+                                      connptr->ssl_conn,
                                       "%s %s HTTP/1.0\r\n"
                                       "Host: %s%s\r\n"
                                       "Connection: close\r\n",
@@ -307,6 +310,7 @@ establish_http_connection (struct conn_s
 static int send_ssl_response (struct conn_s *connptr)
 {
         return write_message (connptr->client_fd,
+                              connptr->ssl_conn,
                               "%s\r\n"
                               "%s\r\n"
                               "\r\n", SSL_CONNECTION_RESPONSE, PROXY_AGENT);
@@ -412,7 +416,18 @@ BAD_REQUEST_ERROR:
                                              "url", url, NULL);
                         goto fail;
                 }
-        } else if (strcmp (request->method, "CONNECT") == 0) {
+        } else if (strncasecmp (url, "https://", 8) == 0) {
+                char *skipped_type = strstr (url, "//") + 2;
+
+                if (extract_url (skipped_type, HTTP_PORT_SSL, request) < 0) {
+                        indicate_http_error (connptr, 400, "Bad Request",
+                                             "detail", "Could not parse URL",
+                                             "url", url, NULL);
+                        goto fail;
+                }
+                connptr->is_reverse_ssl = TRUE;
+        }
+        else if (strcmp (request->method, "CONNECT") == 0) {
                 if (extract_url (url, HTTP_PORT_SSL, request) < 0) {
                         indicate_http_error (connptr, 400, "Bad Request",
                                              "detail", "Could not parse URL",
@@ -522,13 +537,13 @@ static int pull_client_data (struct conn
                 return -1;
 
         do {
-                len = safe_read (connptr->client_fd, buffer,
+                len = safe_read (connptr->client_fd, connptr->ssl_conn, buffer,
                                  min (MAXBUFFSIZE, (unsigned long int) length));
                 if (len <= 0)
                         goto ERROR_EXIT;
 
                 if (!connptr->error_variables) {
-                        if (safe_write (connptr->server_fd, buffer, len) < 0)
+                        if (safe_write (connptr->server_fd, connptr->ssl_conn, buffer, len) < 0)
                                 goto ERROR_EXIT;
                 }
 
@@ -588,6 +603,7 @@ static int add_xtinyproxy_header (struct
 {
         assert (connptr && connptr->server_fd >= 0);
         return write_message (connptr->server_fd,
+                              connptr->ssl_conn,
                               "X-Tinyproxy: %s\r\n", connptr->client_ip_addr);
 }
 #endif /* XTINYPROXY */
@@ -601,6 +617,7 @@ static int add_xtinyproxymac_header (str
 {
         assert (connptr && connptr->server_fd >= 0);
         return write_message (connptr->server_fd,
+                              connptr->ssl_conn,
                               "X-Tinyproxy-MAC: %s\r\n", connptr->client_mac_addr);
 }
 #endif /* XTINYPROXYMAC */
@@ -643,7 +660,7 @@ add_header_to_connection (orderedmap has
 /*
  * Read all the headers from the stream
  */
-static int get_all_headers (int fd, orderedmap hashofheaders)
+static int get_all_headers (int fd, SSL *ssl_conn, orderedmap hashofheaders)
 {
         char *line = NULL;
         char *header = NULL;
@@ -657,7 +674,7 @@ static int get_all_headers (int fd, orde
         assert (hashofheaders != NULL);
 
         for (count = 0; count < MAX_HEADERS; count++) {
-                if ((linelen = readline (fd, &line)) <= 0) {
+                if ((linelen = readline (fd, ssl_conn, &line)) <= 0) {
                         safefree (header);
                         safefree (line);
                         return -1;
@@ -836,6 +853,7 @@ write_via_header (int fd, orderedmap has
         data = orderedmap_find (hashofheaders, "via");
         if (data) {
                 ret = write_message (fd,
+                                     NULL,
                                      "Via: %s, %hu.%hu %s (%s/%s)\r\n",
                                      data, major, minor, hostname, PACKAGE,
                                      VERSION);
@@ -843,6 +861,7 @@ write_via_header (int fd, orderedmap has
                 orderedmap_remove (hashofheaders, "via");
         } else {
                 ret = write_message (fd,
+                                     NULL,
                                      "Via: %hu.%hu %s (%s/%s)\r\n",
                                      major, minor, hostname, PACKAGE, VERSION);
         }
@@ -932,7 +951,7 @@ process_client_headers (struct conn_s *c
                 if (!is_anonymous_enabled (config)
                     || anonymous_search (config, data) > 0) {
                         ret =
-                            write_message (connptr->server_fd,
+                            write_message (connptr->server_fd, connptr->ssl_conn,
                                            "%s: %s\r\n", data, header);
                         if (ret < 0) {
                                 indicate_http_error (connptr, 503,
@@ -957,7 +976,7 @@ process_client_headers (struct conn_s *c
 
 
         /* Write the final "blank" line to signify the end of the headers */
-        if (safe_write (connptr->server_fd, "\r\n", 2) < 0)
+        if (safe_write (connptr->server_fd, connptr->ssl_conn, "\r\n", 2) < 0)
                 return -1;
 
         /*
@@ -1000,7 +1019,7 @@ static int process_server_headers (struc
 
         /* Get the response line from the remote server. */
 retry:
-        len = readline (connptr->server_fd, &response_line);
+        len = readline (connptr->server_fd, connptr->ssl_conn, &response_line);
         if (len <= 0)
                 return -1;
 
@@ -1026,7 +1045,7 @@ retry:
         /*
          * Get all the headers from the remote server in a big hash
          */
-        if (get_all_headers (connptr->server_fd, hashofheaders) < 0) {
+        if (get_all_headers (connptr->server_fd, connptr->ssl_conn, hashofheaders) < 0) {
                 log_message (LOG_WARNING,
                              "Could not retrieve all the headers from the remote server.");
                 orderedmap_destroy (hashofheaders);
@@ -1054,7 +1073,8 @@ retry:
         }
 
         /* Send the saved response line first */
-        ret = write_message (connptr->client_fd, "%s\r\n", response_line);
+        ret = write_message (connptr->client_fd, connptr->ssl_conn, "%s\r\n", response_line);
+
         safefree (response_line);
         if (ret < 0)
                 goto ERROR_EXIT;
@@ -1089,6 +1109,7 @@ retry:
         /* Write tracking cookie for the magical reverse proxy path hack */
         if (config->reversemagic && connptr->reversepath) {
                 ret = write_message (connptr->client_fd,
+                                     connptr->ssl_conn,
                                      "Set-Cookie: " REVERSE_COOKIE
                                      "=%s; path=/\r\n", connptr->reversepath);
                 if (ret < 0)
@@ -1112,6 +1133,7 @@ retry:
                 if (reverse) {
                         ret =
                             write_message (connptr->client_fd,
+                                           connptr->ssl_conn,
                                            "Location: %s%s%s\r\n",
                                            config->reversebaseurl,
                                            (reverse->path + 1), (header + len));
@@ -1133,7 +1155,7 @@ retry:
         iter = 0;
         while ((iter = orderedmap_next(hashofheaders, iter, &data, &header))) {
 
-                ret = write_message (connptr->client_fd,
+                ret = write_message (connptr->client_fd, connptr->ssl_conn,
                                      "%s: %s\r\n", data, header);
                 if (ret < 0)
                         goto ERROR_EXIT;
@@ -1141,7 +1163,7 @@ retry:
         orderedmap_destroy (hashofheaders);
 
         /* Write the final blank line to signify the end of the headers */
-        if (safe_write (connptr->client_fd, "\r\n", 2) < 0)
+        if (safe_write (connptr->client_fd, connptr->ssl_conn, "\r\n", 2) < 0)
                 return -1;
 
         return 0;
@@ -1195,7 +1217,7 @@ static void relay_connection (struct con
 
                 if (fds[1].revents & MYPOLL_READ) {
                         bytes_received =
-                            read_buffer (connptr->server_fd, connptr->sbuffer);
+                            read_buffer (connptr->server_fd, connptr->ssl_conn, connptr->sbuffer);
                         if (bytes_received < 0)
                                 break;
 
@@ -1204,21 +1226,21 @@ static void relay_connection (struct con
                                 break;
                 }
                 if ((fds[0].revents & MYPOLL_READ)
-                    && read_buffer (connptr->client_fd, connptr->cbuffer) < 0) {
+                    && read_buffer (connptr->client_fd, connptr->ssl_conn, connptr->cbuffer) < 0) {
                         break;
                 }
                 if ((fds[1].revents & MYPOLL_WRITE)
-                    && write_buffer (connptr->server_fd, connptr->cbuffer) < 0) {
+                    && write_buffer (connptr->server_fd, connptr->ssl_conn, connptr->cbuffer) < 0) {
                         break;
                 }
                 if ((fds[0].revents & MYPOLL_WRITE)
-                    && write_buffer (connptr->client_fd, connptr->sbuffer) < 0) {
+                    && write_buffer (connptr->client_fd, connptr->ssl_conn, connptr->sbuffer) < 0) {
                         break;
                 }
         }
 
         while (buffer_size (connptr->sbuffer) > 0) {
-                if (write_buffer (connptr->client_fd, connptr->sbuffer) < 0)
+                if (write_buffer (connptr->client_fd, connptr->ssl_conn, connptr->sbuffer) < 0)
                         break;
         }
         shutdown (connptr->client_fd, SHUT_WR);
@@ -1235,7 +1257,7 @@ static void relay_connection (struct con
         }
 
         while (buffer_size (connptr->cbuffer) > 0) {
-                if (write_buffer (connptr->server_fd, connptr->cbuffer) < 0)
+                if (write_buffer (connptr->server_fd, connptr->ssl_conn, connptr->cbuffer) < 0)
                         break;
         }
 
@@ -1270,9 +1292,9 @@ connect_to_upstream_proxy(struct conn_s
 		host = gethostbyname(request->host);
 		memcpy(&buff[4], host->h_addr_list[0], 4); /* dest ip */
 		buff[8] = 0; /* user */
-		if (9 != safe_write(connptr->server_fd, buff, 9))
+		if (9 != safe_write(connptr->server_fd, connptr->ssl_conn, buff, 9))
 			return -1;
-		if (8 != safe_read(connptr->server_fd, buff, 8))
+		if (8 != safe_read(connptr->server_fd, connptr->ssl_conn, buff, 8))
 			return -1;
 		if (buff[0]!=0 || buff[1]!=90)
 			return -1;
@@ -1285,9 +1307,9 @@ connect_to_upstream_proxy(struct conn_s
 		buff[1] = n_methods; /* number of methods  */
 		buff[2] = 0; /* no auth method */
 		if (ulen) buff[3] = 2;  /* auth method -> username / password */
-		if (2+n_methods != safe_write(connptr->server_fd, buff, 2+n_methods))
+		if (2+n_methods != safe_write(connptr->server_fd, connptr->ssl_conn, buff, 2+n_methods))
 			return -1;
-		if (2 != safe_read(connptr->server_fd, buff, 2))
+		if (2 != safe_read(connptr->server_fd, connptr->ssl_conn, buff, 2))
 			return -1;
 		if (buff[0] != 5 || (buff[1] != 0 && buff[1] != 2))
 			return -1;
@@ -1308,10 +1330,10 @@ connect_to_upstream_proxy(struct conn_s
 			memcpy(cur, cur_upstream->pass, c);
 			cur += c;
 
-			if((cur - out) != safe_write(connptr->server_fd, out, cur - out))
+			if((cur - out) != safe_write(connptr->server_fd, connptr->ssl_conn, out, cur - out))
 				return -1;
 
-			if(2 != safe_read(connptr->server_fd, in, 2))
+			if(2 != safe_read(connptr->server_fd, connptr->ssl_conn, in, 2))
 				return -1;
 			if(in[1] != 0 || !(in[0] == 5 || in[0] == 1)) {
 				return -1;
@@ -1329,9 +1351,9 @@ connect_to_upstream_proxy(struct conn_s
 		memcpy(&buff[5], request->host, len); /* dest ip */
 		port = htons(request->port);
 		memcpy(&buff[5+len], &port, 2); /* dest port */
-		if (7+len != safe_write(connptr->server_fd, buff, 7+len))
+		if (7+len != safe_write(connptr->server_fd, connptr->ssl_conn, buff, 7+len))
 			return -1;
-		if (4 != safe_read(connptr->server_fd, buff, 4))
+		if (4 != safe_read(connptr->server_fd, connptr->ssl_conn, buff, 4))
 			return -1;
 		if (buff[0]!=5 || buff[1]!=0)
 			return -1;
@@ -1339,17 +1361,25 @@ connect_to_upstream_proxy(struct conn_s
 			case 1: len=4; break; /* ip v4 */
 			case 4: len=16; break; /* ip v6 */
 			case 3: /* domainname */
-				if (1 != safe_read(connptr->server_fd, buff, 1))
+				if (1 != safe_read(connptr->server_fd, connptr->ssl_conn, buff, 1))
 					return -1;
 				len = buff[0]; /* max = 255 */
 				break;
 			default: return -1;
 		}
-		if (2+len != safe_read(connptr->server_fd, buff, 2+len))
+		if (2+len != safe_read(connptr->server_fd, connptr->ssl_conn, buff, 2+len))
 			return -1;
+	} else if (cur_upstream->type == PT_HTTPS) {
+			connptr->ssl_conn = SSL_new(ctx);
+			SSL_set_fd(connptr->ssl_conn, connptr->server_fd);
+			if (SSL_connect(connptr->ssl_conn) == -1) {
+				log_message(LOG_ERR,
+					        "Failed to open SSL connection for file descriptor: %d",
+                                                connptr->server_fd);
+			}
 	} else {
-		return -1;
-	}
+                return -1;
+        }
 
 	if (connptr->connect_method)
 		return 0;
@@ -1401,8 +1431,8 @@ connect_to_upstream (struct conn_s *conn
                 return -1;
         }
 
-	if (cur_upstream->type != PT_HTTP)
-		return connect_to_upstream_proxy(connptr, request);
+        if (cur_upstream->type != PT_HTTP)
+                return connect_to_upstream_proxy(connptr, request);
 
         log_message (LOG_CONN,
                      "Established connection to upstream proxy \"%s\" "
@@ -1465,7 +1495,7 @@ get_request_entity(struct conn_s *connpt
                log_message (LOG_INFO, "no entity");
         } else if (ret == 1 && (fds[0].revents & MYPOLL_READ)) {
                 ssize_t nread;
-                nread = read_buffer (connptr->client_fd, connptr->cbuffer);
+                nread = read_buffer (connptr->client_fd, connptr->ssl_conn, connptr->cbuffer);
                 if (nread < 0) {
                         log_message (LOG_ERR,
                                      "Error reading readable client_fd %d",
@@ -1612,7 +1642,7 @@ void handle_connection (struct conn_s *c
         /*
          * Get all the headers from the client in a big hash.
          */
-        if (get_all_headers (connptr->client_fd, hashofheaders) < 0) {
+        if (get_all_headers (connptr->client_fd, connptr->ssl_conn, hashofheaders) < 0) {
                 log_message (LOG_WARNING,
                              "Could not retrieve all the headers from the client");
                 indicate_http_error (connptr, 400, "Bad Request",
@@ -1682,7 +1712,6 @@ e401:
                 }
                 HC_FAIL();
         }
-
         connptr->upstream_proxy = UPSTREAM_HOST (request->host);
         if (connptr->upstream_proxy != NULL) {
                 if (connect_to_upstream (connptr, request) < 0) {
@@ -1704,6 +1733,15 @@ e401:
                              "Established connection to host \"%s\" using "
                              "file descriptor %d.", request->host,
                              connptr->server_fd);
+                if (connptr->is_reverse_ssl) {
+                        connptr->ssl_conn = SSL_new(ctx);
+                        SSL_set_fd(connptr->ssl_conn, connptr->server_fd);
+                        if (SSL_connect(connptr->ssl_conn) == -1) {
+                                log_message(LOG_ERR,
+                                                "Failed to open SSL connection for fd: %d.",
+                                                connptr->server_fd);
+                        }
+                }
 
                 if (!connptr->connect_method)
                         establish_http_connection (connptr, request);
--- a/src/upstream.h
+++ b/src/upstream.h
@@ -44,6 +44,7 @@ enum upstream_build_error {
 typedef enum proxy_type {
 	PT_NONE = 0,
 	PT_HTTP,
+	PT_HTTPS,
 	PT_SOCKS4,
 	PT_SOCKS5
 } proxy_type;
--- a/src/upstream.c
+++ b/src/upstream.c
@@ -37,6 +37,7 @@ proxy_type_name(proxy_type type)
     switch(type) {
         case PT_NONE: return "none";
         case PT_HTTP: return "http";
+        case PT_HTTPS: return "https";
         case PT_SOCKS4: return "socks4";
         case PT_SOCKS5: return "socks5";
         default: return "unknown";
