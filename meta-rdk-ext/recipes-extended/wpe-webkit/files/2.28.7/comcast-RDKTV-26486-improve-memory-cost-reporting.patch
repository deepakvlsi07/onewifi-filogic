From 5b629622cf4e4f7ef7d7d43d89c4e1bc7f4f68d1 Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Thu, 7 Dec 2023 21:19:59 +0000
Subject: [PATCH 1/2] comcast - RDKTV-26486 - backport ImageBitmap memory cost
 report

ImageBitmap should report its memory cost
 https://bugs.webkit.org/show_bug.cgi?id=187964

Patch by Kimmo Kinnunen <kkinnunen@apple.com> on 2021-10-24
Reviewed by Simon Fraser.

Add memory cost reporting for ImageBitmap. In order to avoid storing a lock, computing the
memory cost many times and querying the thread-unsafe image buffer, compute it only when the
image buffer updates and cache the value.

It is unclear how to test this with current infrastructure.

* html/ImageBitmap.cpp:
(WebCore::ImageBitmap::ImageBitmap):
(WebCore::ImageBitmap::takeImageBitmapBacking):
(WebCore::ImageBitmap::updateMemoryCost):
(WebCore::ImageBitmap::memoryCost const):
* html/ImageBitmap.h:
* html/ImageBitmap.idl:

Canonical link: https://commits.webkit.org/243481@main
git-svn-id: https://svn.webkit.org/repository/webkit/trunk@284772 268f45cc-cd09-0410-ab3c-d52691b4dbfc
---
 Source/WebCore/html/ImageBitmap.cpp | 20 +++++++++++++++++++-
 Source/WebCore/html/ImageBitmap.h   |  4 ++++
 Source/WebCore/html/ImageBitmap.idl |  3 ++-
 3 files changed, 25 insertions(+), 2 deletions(-)

diff --git a/Source/WebCore/html/ImageBitmap.cpp b/Source/WebCore/html/ImageBitmap.cpp
index e2f95e9af07d..760a9849520c 100644
--- a/Source/WebCore/html/ImageBitmap.cpp
+++ b/Source/WebCore/html/ImageBitmap.cpp
@@ -710,6 +710,7 @@ ImageBitmap::ImageBitmap(std::unique_ptr<ImageBuffer>&& buffer)
     : m_bitmapData(WTFMove(buffer))
 {
     ASSERT(m_bitmapData);
+    updateMemoryCost();
 }
 
 ImageBitmap::~ImageBitmap() = default;
@@ -736,12 +737,29 @@ void ImageBitmap::close()
 {
     m_detached = true;
     m_bitmapData = nullptr;
+    updateMemoryCost();
 }
 
 std::unique_ptr<ImageBuffer> ImageBitmap::transferOwnershipAndClose()
 {
     m_detached = true;
-    return WTFMove(m_bitmapData);
+    auto result = WTFMove(m_bitmapData);
+    updateMemoryCost();
+    return result;
+}
+
+void ImageBitmap::updateMemoryCost()
+{
+    if (m_bitmapData) {
+        m_memoryCost = m_bitmapData->memoryCost();
+        return;
+    }
+    m_memoryCost = 0;
+}
+
+size_t ImageBitmap::memoryCost() const
+{
+    return m_memoryCost;
 }
 
 }
diff --git a/Source/WebCore/html/ImageBitmap.h b/Source/WebCore/html/ImageBitmap.h
index 7cca2589db1b..16dba59edaab 100644
--- a/Source/WebCore/html/ImageBitmap.h
+++ b/Source/WebCore/html/ImageBitmap.h
@@ -27,6 +27,7 @@
 
 #include "IDLTypes.h"
 #include "ScriptWrappable.h"
+#include <atomic>
 #include <wtf/RefCounted.h>
 
 namespace JSC {
@@ -101,6 +102,7 @@ public:
 
     static Vector<std::pair<std::unique_ptr<ImageBuffer>, bool>> detachBitmaps(Vector<RefPtr<ImageBitmap>>&&);
 
+    size_t memoryCost() const;
 private:
     friend class ImageBitmapImageObserver;
     friend class PendingImageBitmap;
@@ -122,10 +124,12 @@ private:
     static void createPromise(ScriptExecutionContext&, RefPtr<ImageData>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
     static void createPromise(ScriptExecutionContext&, RefPtr<TypedOMCSSImageValue>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
     static void createFromBuffer(Ref<ArrayBuffer>&&, String mimeType, long long expectedContentLength, const URL&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
+    void updateMemoryCost();
 
     std::unique_ptr<ImageBuffer> m_bitmapData;
     bool m_detached { false };
     bool m_originClean { true };
+    std::atomic<size_t> m_memoryCost { 0 };
 };
 
 }
diff --git a/Source/WebCore/html/ImageBitmap.idl b/Source/WebCore/html/ImageBitmap.idl
index 87c8ef1725dc..a9a89f5dd7ea 100644
--- a/Source/WebCore/html/ImageBitmap.idl
+++ b/Source/WebCore/html/ImageBitmap.idl
@@ -26,7 +26,8 @@
 [
     EnabledAtRuntime=ImageBitmap,
     Exposed=(Window,Worker),
-    ImplementationLacksVTable
+    ImplementationLacksVTable,
+    ReportExtraMemoryCost
 ] interface ImageBitmap {
     readonly attribute unsigned long width;
     readonly attribute unsigned long height;
-- 
2.25.1

From 9edd2eb09b6f53c532cbb22dfcbcc88c242309ae Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Fri, 8 Dec 2023 17:08:31 +0000
Subject: [PATCH 2/2] Blob should report memory cost

---
 Source/WebCore/fileapi/Blob.cpp | 7 +++++++
 Source/WebCore/fileapi/Blob.h   | 4 ++++
 Source/WebCore/fileapi/Blob.idl | 1 +
 3 files changed, 12 insertions(+)

diff --git a/Source/WebCore/fileapi/Blob.cpp b/Source/WebCore/fileapi/Blob.cpp
index 85299fece448..29bbe86db690 100644
--- a/Source/WebCore/fileapi/Blob.cpp
+++ b/Source/WebCore/fileapi/Blob.cpp
@@ -104,6 +104,7 @@ Blob::Blob(Vector<BlobPartVariant>&& blobPartVariants, const BlobPropertyBag& pr
 Blob::Blob(const SharedBuffer& buffer, const String& contentType)
     : m_type(contentType)
     , m_size(buffer.size())
+    , m_memoryCost(buffer.size())
 {
     Vector<uint8_t> data;
     data.append(buffer.data(), buffer.size());
@@ -117,6 +118,7 @@ Blob::Blob(const SharedBuffer& buffer, const String& contentType)
 Blob::Blob(Vector<uint8_t>&& data, const String& contentType)
     : m_type(contentType)
     , m_size(data.size())
+    , m_memoryCost(data.size())
 {
     Vector<BlobPart> blobParts;
     blobParts.append(BlobPart(WTFMove(data)));
@@ -128,6 +130,7 @@ Blob::Blob(ReferencingExistingBlobConstructor, const Blob& blob)
     : m_internalURL(BlobURL::createInternalURL())
     , m_type(blob.type())
     , m_size(blob.size())
+    , m_memoryCost(blob.memoryCost())
 {
     ThreadableBlobRegistry::registerBlobURL(m_internalURL, { BlobPart(blob.url()) } , m_type);
 }
@@ -220,5 +223,9 @@ URLRegistry& Blob::registry() const
     return BlobURLRegistry::registry();
 }
 
+size_t Blob::memoryCost() const
+{
+    return m_memoryCost;
+}
 
 } // namespace WebCore
diff --git a/Source/WebCore/fileapi/Blob.h b/Source/WebCore/fileapi/Blob.h
index 614d809d2089..8a254287cb3e 100644
--- a/Source/WebCore/fileapi/Blob.h
+++ b/Source/WebCore/fileapi/Blob.h
@@ -106,6 +106,8 @@ public:
         return adoptRef(*new Blob(m_internalURL, start, end, contentType));
     }
 
+    size_t memoryCost() const;
+
 protected:
     WEBCORE_EXPORT Blob();
     Blob(Vector<BlobPartVariant>&&, const BlobPropertyBag&);
@@ -133,6 +135,8 @@ private:
     String m_type;
 
     mutable Optional<unsigned long long> m_size;
+
+    std::atomic<size_t> m_memoryCost { 0 };
 };
 
 } // namespace WebCore
diff --git a/Source/WebCore/fileapi/Blob.idl b/Source/WebCore/fileapi/Blob.idl
index 69d0f155ad47..bbb6aa4af704 100644
--- a/Source/WebCore/fileapi/Blob.idl
+++ b/Source/WebCore/fileapi/Blob.idl
@@ -35,6 +35,7 @@ typedef (BufferSource or Blob or USVString) BlobPart;
     GenerateIsReachable=Impl,
     CustomToJSObject,
     Constructor(optional sequence<BlobPart> blobParts, optional BlobPropertyBag options),
+    ReportExtraMemoryCost,
 ] interface Blob {
     readonly attribute unsigned long long size;
     readonly attribute DOMString type;
-- 
2.25.1

