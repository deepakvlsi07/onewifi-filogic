From a55fbbc85affab00f79ff1e53f8985ac8f31291e Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Thu, 7 Apr 2022 15:36:11 +0000
Subject: [PATCH] comcast - XRE-13799,XRE-13989 - Track encrypted playback

---
 Source/WebCore/html/HTMLMediaElement.cpp      |  5 ++
 Source/WebCore/html/HTMLMediaElement.h        |  1 +
 Source/WebCore/platform/GStreamer.cmake       |  1 +
 .../WebCore/platform/graphics/MediaPlayer.cpp |  5 ++
 .../WebCore/platform/graphics/MediaPlayer.h   |  2 +
 .../gstreamer/MediaPlayerPrivateGStreamer.cpp | 23 ++++++
 .../gstreamer/MediaPlayerPrivateGStreamer.h   |  5 ++
 ...diaPlayerGStreamerEncryptedPlayTracker.cpp | 74 +++++++++++++++++++
 ...MediaPlayerGStreamerEncryptedPlayTracker.h | 43 +++++++++++
 .../eme/WebKitThunderDecryptorGStreamer.cpp   |  7 ++
 10 files changed, 166 insertions(+)
 create mode 100644 Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
 create mode 100644 Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h

diff --git a/Source/WebCore/html/HTMLMediaElement.cpp b/Source/WebCore/html/HTMLMediaElement.cpp
index be6b671e4a5d..8a94cbe19098 100644
--- a/Source/WebCore/html/HTMLMediaElement.cpp
+++ b/Source/WebCore/html/HTMLMediaElement.cpp
@@ -6999,6 +6999,11 @@ String HTMLMediaElement::mediaPlayerUserAgent() const
     return frame->loader().userAgent(m_currentSrc);
 }
 
+String HTMLMediaElement::mediaPlayerDocumentDomain() const
+{
+    return document().domain();
+}
+
 #if ENABLE(AVF_CAPTIONS)
 
 static inline PlatformTextTrack::TrackKind toPlatform(TextTrack::Kind kind)
diff --git a/Source/WebCore/html/HTMLMediaElement.h b/Source/WebCore/html/HTMLMediaElement.h
index 0ec77f1f0ad2..61790154f0a6 100644
--- a/Source/WebCore/html/HTMLMediaElement.h
+++ b/Source/WebCore/html/HTMLMediaElement.h
@@ -716,6 +716,7 @@ private:
 
     String mediaPlayerReferrer() const override;
     String mediaPlayerUserAgent() const override;
+    String mediaPlayerDocumentDomain() const override;
 
     void mediaPlayerEnterFullscreen() override;
     void mediaPlayerExitFullscreen() override;
diff --git a/Source/WebCore/platform/GStreamer.cmake b/Source/WebCore/platform/GStreamer.cmake
index 18c56c8c4aa8..b3048824a4d9 100644
--- a/Source/WebCore/platform/GStreamer.cmake
+++ b/Source/WebCore/platform/GStreamer.cmake
@@ -28,6 +28,7 @@ if (ENABLE_VIDEO OR ENABLE_WEB_AUDIO)
         platform/graphics/gstreamer/eme/GStreamerEMEUtilities.cpp
         platform/graphics/gstreamer/eme/WebKitClearKeyDecryptorGStreamer.cpp
         platform/graphics/gstreamer/eme/WebKitCommonEncryptionDecryptorGStreamer.cpp
+        platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
 
         platform/graphics/gstreamer/mse/AppendPipeline.cpp
         platform/graphics/gstreamer/mse/GStreamerMediaDescription.cpp
diff --git a/Source/WebCore/platform/graphics/MediaPlayer.cpp b/Source/WebCore/platform/graphics/MediaPlayer.cpp
index 2fd87e88fb7d..1de2149f8181 100644
--- a/Source/WebCore/platform/graphics/MediaPlayer.cpp
+++ b/Source/WebCore/platform/graphics/MediaPlayer.cpp
@@ -1379,6 +1379,11 @@ String MediaPlayer::userAgent() const
     return client().mediaPlayerUserAgent();
 }
 
+String MediaPlayer::documentDomain() const
+{
+    return client().mediaPlayerDocumentDomain();
+}
+
 String MediaPlayer::engineDescription() const
 {
     if (!m_private)
diff --git a/Source/WebCore/platform/graphics/MediaPlayer.h b/Source/WebCore/platform/graphics/MediaPlayer.h
index 5c315d4d8bb7..e3a4773c3f6d 100644
--- a/Source/WebCore/platform/graphics/MediaPlayer.h
+++ b/Source/WebCore/platform/graphics/MediaPlayer.h
@@ -217,6 +217,7 @@ public:
 
     virtual String mediaPlayerReferrer() const { return String(); }
     virtual String mediaPlayerUserAgent() const { return String(); }
+    virtual String mediaPlayerDocumentDomain() const { return String(); }
     virtual void mediaPlayerEnterFullscreen() { }
     virtual void mediaPlayerExitFullscreen() { }
     virtual bool mediaPlayerIsFullscreen() const { return false; }
@@ -540,6 +541,7 @@ public:
 
     String referrer() const;
     String userAgent() const;
+    String documentDomain() const;
 
     String engineDescription() const;
     long platformErrorCode() const;
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index d5dd578135ab..05b995c7b35b 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -256,6 +256,10 @@ MediaPlayerPrivateGStreamer::MediaPlayerPrivateGStreamer(MediaPlayer* player)
     ++times;
     GST_INFO("created media player private (%u times) <----------------------------------------------", times);
     fprintf(stderr, "HTML5 video: Player constructed [%p]\n", this);
+
+#if ENABLE(ENCRYPTED_MEDIA)
+    m_tracker = makeUnique<MediaPlayerGStreamerEncryptedPlayTracker>();
+#endif
 }
 
 MediaPlayerPrivateGStreamer::~MediaPlayerPrivateGStreamer()
@@ -1082,6 +1086,10 @@ void MediaPlayerPrivateGStreamer::setPlaybinURL(const URL& url)
     convertToInternalProtocol(m_url);
     GST_INFO_OBJECT(pipeline(), "Load %s", m_url.string().utf8().data());
     g_object_set(m_pipeline.get(), "uri", m_url.string().utf8().data(), nullptr);
+
+#if ENABLE(ENCRYPTED_MEDIA)
+    m_tracker->setURL(m_url.string());
+#endif
 }
 
 static void setSyncOnClock(GstElement *element, bool sync)
@@ -2012,6 +2020,10 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
             error = MediaPlayer::NetworkState::NetworkError;
         }
 
+#if ENABLE(ENCRYPTED_MEDIA)
+        m_tracker->notifyError(static_cast<uint8_t>(error));
+#endif
+
         if (attemptNextLocation)
             issueError = !loadNextLocation();
         if (issueError) {
@@ -2076,6 +2088,9 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
         if (!m_isLegacyPlaybin && currentState == GST_STATE_PAUSED && newState == GST_STATE_PLAYING)
             playbin3SendSelectStreamsIfAppropriate();
 
+#if ENABLE(ENCRYPTED_MEDIA)
+        m_tracker->notifyStateChange(currentState, newState);
+#endif
         break;
     }
     case GST_MESSAGE_BUFFERING:
@@ -2201,6 +2216,10 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
             m_fillTimer.stop();
             m_bufferingPercentage = 100;
             updateStates();
+        } else if (gst_structure_has_name(structure, "drm-decryption-started")) {
+#if ENABLE(ENCRYPTED_MEDIA)
+            m_tracker->notifyDecryptionStarted();
+#endif
         } else
             GST_DEBUG_OBJECT(pipeline(), "Unhandled element message: %" GST_PTR_FORMAT, structure);
         break;
@@ -3856,6 +3875,10 @@ void MediaPlayerPrivateGStreamer::cdmInstanceAttached(CDMInstance& instance)
         return;
     }
 
+#if ENABLE(ENCRYPTED_MEDIA)
+    m_tracker->setKeySystemAndDocumentDomain(instance.keySystem(), m_player->documentDomain());
+#endif
+
     m_cdmInstance = reinterpret_cast<CDMInstanceProxy*>(&instance);
     RELEASE_ASSERT(m_cdmInstance);
     m_cdmInstance->setPlayer(makeWeakPtr(m_player));
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
index 82c0ed991b89..d05e8b5a9951 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
@@ -81,6 +81,7 @@ typedef struct _GstMpegtsSection GstMpegtsSection;
 
 #if ENABLE(ENCRYPTED_MEDIA)
 #include "CDMProxy.h"
+#include "MediaPlayerGStreamerEncryptedPlayTracker.h"
 #endif
 
 typedef struct _GstStreamVolume GstStreamVolume;
@@ -526,6 +527,10 @@ private:
     RefPtr<MediaStreamPrivate> m_streamPrivate;
 #endif
 
+#if ENABLE(ENCRYPTED_MEDIA)
+    std::unique_ptr<MediaPlayerGStreamerEncryptedPlayTracker> m_tracker;
+#endif
+
     // playbin3 only:
     bool m_waitingForStreamsSelectedEvent { true };
     AtomString m_currentAudioStreamId; // Currently playing.
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
new file mode 100644
index 000000000000..6243991214d2
--- /dev/null
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
@@ -0,0 +1,74 @@
+#include "config.h"
+#include "MediaPlayerGStreamerEncryptedPlayTracker.h"
+
+#include <wtf/Atomics.h>
+
+#include <stdio.h>
+#include <sys/syscall.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/syscall.h>
+
+#if ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
+
+namespace WebCore {
+
+MediaPlayerGStreamerEncryptedPlayTracker::~MediaPlayerGStreamerEncryptedPlayTracker() {
+    // Mimic Playback end i.e EOS
+    notifyStateChange(GST_STATE_READY, GST_STATE_NULL);
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::setURL(String url) {
+    m_url = WTFMove(url);
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::setKeySystemAndDocumentDomain(String keySystem, String documentDomain) {
+    m_keySystem = makeString(keySystem, ";origin="_s, documentDomain);
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::notifyStateChange(GstState current, GstState pending) {
+    if (current != GST_STATE_PLAYING && pending == GST_STATE_PLAYING) {
+        m_playStart = WTF::MonotonicTime::now();
+        logPlayStart(PLAYBACK_STARTED);
+    } else if (current != GST_STATE_PAUSED && pending == GST_STATE_PAUSED) {
+        if (m_playStart > WTF::MonotonicTime::fromRawSeconds(0))
+            m_playTime += WTF::MonotonicTime::now() - std::max(m_playStart, m_decryptionStart);
+
+        m_playStart = WTF::MonotonicTime::fromRawSeconds(-1);
+    } else if (current == GST_STATE_READY && pending == GST_STATE_NULL) {
+        if (m_playStart > WTF::MonotonicTime::fromRawSeconds(0))
+            m_playTime += WTF::MonotonicTime::now() - std::max(m_playStart, m_decryptionStart);
+
+        if(m_playTime > 0_s && m_decryptionStart > WTF::MonotonicTime::fromRawSeconds(0))
+            fprintf(stderr, "Encrypted Content play time for url=%s is %.3f sec\n", m_url.utf8().data(), m_playTime.seconds());
+
+        m_decryptionStart = WTF::MonotonicTime::fromRawSeconds(-1);
+        m_playStart = WTF::MonotonicTime::fromRawSeconds(-1);
+        m_playTime = WTF::Seconds(-1);
+    }
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::notifyDecryptionStarted() {
+    if(m_decryptionStart < WTF::MonotonicTime::fromRawSeconds(0)) {
+        m_decryptionStart = WTF::MonotonicTime::now();
+        logPlayStart(DECRYPTION_STARTED);
+    }
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::logPlayStart(PlayState state) {
+    if(m_playTime < 0_s &&
+       ((state == PLAYBACK_STARTED && m_decryptionStart > WTF::MonotonicTime::fromRawSeconds(0)) ||
+        (state == DECRYPTION_STARTED && m_playStart > WTF::MonotonicTime::fromRawSeconds(0)))) {
+        m_playTime = 0_s;
+        fprintf(stderr, "Started playing Encrypted Content, url=%s, keySystem=%s\n", m_url.utf8().data(), m_keySystem.utf8().data());
+    }
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::notifyError(uint8_t errorCode) {
+    if (!m_keySystem.isEmpty())
+        fprintf(stderr, "Encrypted Content playback error: keySystem=%s, code=%d, url=%s\n", m_keySystem.utf8().data(), errorCode, m_url.utf8().data());
+}
+
+} //namespace WebCore
+
+#endif // ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h
new file mode 100644
index 000000000000..9a86a0915e56
--- /dev/null
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h
@@ -0,0 +1,43 @@
+#pragma once
+
+#if ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
+
+#include "GStreamerCommon.h"
+#include <wtf/ThreadSafeRefCounted.h>
+#include <wtf/text/WTFString.h>
+#include <wtf/Seconds.h>
+#include <wtf/MonotonicTime.h>
+#include <gst/gst.h>
+
+namespace WebCore {
+
+class MediaPlayerGStreamerEncryptedPlayTracker {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    MediaPlayerGStreamerEncryptedPlayTracker() = default;
+    ~MediaPlayerGStreamerEncryptedPlayTracker();
+
+    void setURL(String url);
+    void setKeySystemAndDocumentDomain(String keySystem, String documentDomain);
+    void notifyStateChange(GstState current, GstState pending);
+    void notifyDecryptionStarted();
+    void notifyError(uint8_t errorCode);
+
+private:
+    enum PlayState {
+        PLAYBACK_STARTED,
+        DECRYPTION_STARTED
+    };
+    void logPlayStart(PlayState state);
+    void logPlayEnd();
+
+    String m_url;
+    String m_keySystem;
+    WTF::MonotonicTime m_playStart { MonotonicTime::fromRawSeconds(-1) };
+    WTF::MonotonicTime m_decryptionStart { MonotonicTime::fromRawSeconds(-1) };
+    WTF::Seconds m_playTime { -1 };
+};
+
+} //namespace WebCore
+
+#endif // ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp
index e8133e24d7c7..62848e3c6ef7 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitThunderDecryptorGStreamer.cpp
@@ -36,6 +36,7 @@ using namespace WebCore;
 
 struct WebKitMediaThunderDecryptPrivate {
     RefPtr<CDMProxyThunder> cdmProxy;
+    bool didReportDecryptionStart;
 };
 
 static const char* protectionSystemId(WebKitMediaCommonEncryptionDecrypt*);
@@ -177,6 +178,12 @@ static bool decrypt(WebKitMediaCommonEncryptionDecrypt* decryptor, GstBuffer* iv
     context.caps = caps;
     bool result = priv->cdmProxy->decrypt(context);
 
+    if (result && !priv->didReportDecryptionStart) {
+        priv->didReportDecryptionStart = true;
+        GstStructure *s = gst_structure_new_empty("drm-decryption-started");
+        gst_element_post_message(GST_ELEMENT(self), gst_message_new_element(GST_OBJECT(self), s));
+    }
+
     return result;
 }
 
-- 
2.25.1

