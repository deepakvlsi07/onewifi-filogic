From c5663527ed954ec0d866318a01c3d1f6a1f5d0e9 Mon Sep 17 00:00:00 2001
From: Andrzej Surdej <Andrzej_Surdej@comcast.com>
Date: Wed, 29 Nov 2023 13:54:23 +0000
Subject: [PATCH] [MSE SourceBuffer] Disable audio flush on samples replacement
 for Spotify

With edit lists enabled recently, Spotify started to append
the same segment multiple times that to samples replacement
and audio flush. As a result audio is breaking on every append.

Disable audio flush on samples replacement for Spotify
until this is fixed by Spotify
---
 .../Modules/mediasource/SourceBuffer.cpp       |  4 ++++
 Source/WebCore/page/Quirks.cpp                 | 18 ++++++++++++++++++
 Source/WebCore/page/Quirks.h                   |  8 ++++++++
 .../platform/graphics/SourceBufferPrivate.cpp  |  2 +-
 .../platform/graphics/SourceBufferPrivate.h    |  2 ++
 5 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/Source/WebCore/Modules/mediasource/SourceBuffer.cpp b/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
index 91d0c393413a..1be76f620723 100644
--- a/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
+++ b/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
@@ -101,6 +101,10 @@ SourceBuffer::SourceBuffer(Ref<SourceBufferPrivate>&& sourceBufferPrivate, Media
 
     m_private->setClient(this);
     m_private->setIsAttached(true);
+
+    if (document().quirks().shouldBypassAudioFlushOnSampleReplacement()) {
+        m_private->setShouldBypassAudioFlushOnSampleReplacement(true);
+    }
 }
 
 SourceBuffer::~SourceBuffer()
diff --git a/Source/WebCore/page/Quirks.cpp b/Source/WebCore/page/Quirks.cpp
index 89aa38003c05..73cdd41a9626 100644
--- a/Source/WebCore/page/Quirks.cpp
+++ b/Source/WebCore/page/Quirks.cpp
@@ -1490,4 +1490,22 @@ bool Quirks::shouldDisableLazyImageLoadingQuirk() const
     return m_shouldDisableLazyImageLoadingQuirk.value();
 }
 
+#if ENABLE(MEDIA_SOURCE)
+bool Quirks::shouldBypassAudioFlushOnSampleReplacement() const
+{
+    if (!needsQuirks())
+        return false;
+
+    if (m_shouldBypassAudioFlushOnSampleReplacementQuirk)
+        return m_shouldBypassAudioFlushOnSampleReplacementQuirk.value();
+
+    auto domain = m_document->securityOrigin().domain().convertToASCIILowercase();
+
+    m_shouldBypassAudioFlushOnSampleReplacementQuirk =
+        (domain.endsWith(".spotify.com"_s) || domain == "tv.scdn.co"_s);
+
+    return m_shouldBypassAudioFlushOnSampleReplacementQuirk.value();
+}
+#endif
+
 }
diff --git a/Source/WebCore/page/Quirks.h b/Source/WebCore/page/Quirks.h
index 6a49a5a0ee98..1a2d850299f7 100644
--- a/Source/WebCore/page/Quirks.h
+++ b/Source/WebCore/page/Quirks.h
@@ -162,6 +162,10 @@ public:
 
     bool shouldDisableLazyImageLoadingQuirk() const;
     
+#if ENABLE(MEDIA_SOURCE)
+    bool shouldBypassAudioFlushOnSampleReplacement() const;
+#endif
+
 private:
     bool needsQuirks() const;
 
@@ -217,6 +221,10 @@ private:
     mutable std::optional<bool> m_needsVideoShouldMaintainAspectRatioQuirk;
     mutable std::optional<bool> m_shouldExposeShowModalDialog;
     mutable std::optional<bool> m_shouldDisableLazyImageLoadingQuirk;
+#if ENABLE(MEDIA_SOURCE)
+    mutable std::optional<bool> m_shouldBypassAudioFlushOnSampleReplacementQuirk;
+#endif
+
 };
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/graphics/SourceBufferPrivate.cpp b/Source/WebCore/platform/graphics/SourceBufferPrivate.cpp
index 1002f39d70d8..e18e296e239e 100644
--- a/Source/WebCore/platform/graphics/SourceBufferPrivate.cpp
+++ b/Source/WebCore/platform/graphics/SourceBufferPrivate.cpp
@@ -1022,7 +1022,7 @@ void SourceBufferPrivate::didReceiveSample(Ref<MediaSample>&& originalSample)
             // Only force the TrackBuffer to re-enqueue if the removed ranges overlap with enqueued and possibly
             // not yet displayed samples.
             MediaTime currentTime = currentMediaTime();
-            if (trackBuffer.highestEnqueuedPresentationTime().isValid() && currentTime < trackBuffer.highestEnqueuedPresentationTime()) {
+            if (trackBuffer.highestEnqueuedPresentationTime().isValid() && currentTime < trackBuffer.highestEnqueuedPresentationTime() && (!hasAudio() || !m_shouldBypassAudioFlushOnSampleReplacement)) {
                 PlatformTimeRanges possiblyEnqueuedRanges(currentTime, trackBuffer.highestEnqueuedPresentationTime());
                 possiblyEnqueuedRanges.intersectWith(erasedRanges);
                 if (possiblyEnqueuedRanges.length())
diff --git a/Source/WebCore/platform/graphics/SourceBufferPrivate.h b/Source/WebCore/platform/graphics/SourceBufferPrivate.h
index bbaab0b4e96e..85e627c338df 100644
--- a/Source/WebCore/platform/graphics/SourceBufferPrivate.h
+++ b/Source/WebCore/platform/graphics/SourceBufferPrivate.h
@@ -130,6 +130,7 @@ public:
     virtual const void* sourceBufferLogIdentifier() = 0;
 #endif
 
+    void setShouldBypassAudioFlushOnSampleReplacement(bool flag) { m_shouldBypassAudioFlushOnSampleReplacement = flag; }
 protected:
     // The following method should never be called directly and be overridden instead.
     WEBCORE_EXPORT virtual void append(Vector<unsigned char>&&);
@@ -193,6 +194,7 @@ private:
 
     bool m_isMediaSourceEnded { false };
     RefPtr<TimeRanges> m_buffered;
+    bool m_shouldBypassAudioFlushOnSampleReplacement { false };
 };
 
 } // namespace WebCore
-- 
2.25.1

