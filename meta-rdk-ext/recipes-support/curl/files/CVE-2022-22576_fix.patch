Date: 26-June-2023
From: Kalidoss_Marimuthu@comcast.com
Source: Backport

See https://github.com/curl/curl/commit/852aa5ad351ea53e5f

Index: curl-7.69.1/lib/strcase.c
===================================================================
--- curl-7.69.1.orig/lib/strcase.c
+++ curl-7.69.1/lib/strcase.c
@@ -251,6 +251,16 @@ void Curl_strntolower(char *dest, const
   } while(*src++ && --n);
 }
 
+/* Compare case-sensitive NUL-terminated strings, taking care of possible
+ * null pointers. Return true if arguments match.
+ */
+bool Curl_safecmp(char *a, char *b)
+{
+  if(a && b)
+    return !strcmp(a, b);
+  return !a && !b;
+}
+
 /* --- public functions --- */
 
 int curl_strequal(const char *first, const char *second)
Index: curl-7.69.1/lib/strcase.h
===================================================================
--- curl-7.69.1.orig/lib/strcase.h
+++ curl-7.69.1/lib/strcase.h
@@ -48,4 +48,6 @@ char Curl_raw_toupper(char in);
 void Curl_strntoupper(char *dest, const char *src, size_t n);
 void Curl_strntolower(char *dest, const char *src, size_t n);
 
+bool Curl_safecmp(char *a, char *b);
+
 #endif /* HEADER_CURL_STRCASE_H */
Index: curl-7.69.1/lib/url.c
===================================================================
--- curl-7.69.1.orig/lib/url.c
+++ curl-7.69.1/lib/url.c
@@ -729,6 +729,7 @@ static void conn_free(struct connectdata
   Curl_safefree(conn->allocptr.host);
   Curl_safefree(conn->allocptr.cookiehost);
   Curl_safefree(conn->allocptr.rtsp_transport);
+  Curl_safefree(conn->oauth_bearer);
   Curl_safefree(conn->trailer);
   Curl_safefree(conn->host.rawalloc); /* host name buffer */
   Curl_safefree(conn->conn_to_host.rawalloc); /* host name buffer */
@@ -1250,7 +1251,9 @@ ConnectionExists(struct Curl_easy *data,
         /* This protocol requires credentials per connection,
            so verify that we're using the same name and password as well */
         if(strcmp(needle->user, check->user) ||
-           strcmp(needle->passwd, check->passwd)) {
+	   strcmp(needle->passwd, check->passwd) ||
+	   !Curl_safecmp(needle->sasl_authzid, check->sasl_authzid) ||
+	   !Curl_safecmp(needle->oauth_bearer, check->oauth_bearer)) {
           /* one of them was different */
           continue;
         }
@@ -3393,6 +3396,14 @@ static CURLcode create_conn(struct Curl_
     }
   }
 
+  if(data->set.str[STRING_BEARER]) {
+    conn->oauth_bearer = strdup(data->set.str[STRING_BEARER]);
+    if(!conn->oauth_bearer) {
+       result = CURLE_OUT_OF_MEMORY;
+       goto out;
+    }
+  }
+
 #ifdef USE_UNIX_SOCKETS
   if(data->set.str[STRING_UNIX_SOCKET_PATH]) {
     conn->unix_domain_socket = strdup(data->set.str[STRING_UNIX_SOCKET_PATH]);
Index: curl-7.69.1/lib/urldata.h
===================================================================
--- curl-7.69.1.orig/lib/urldata.h
+++ curl-7.69.1/lib/urldata.h
@@ -947,7 +947,7 @@ struct connectdata {
   char *options; /* options string, allocated */
 
   char *sasl_authzid;     /* authorisation identity string, allocated */
-
+  char *oauth_bearer; /* OAUTH2 bearer, allocated */
   int httpversion;        /* the HTTP version*10 reported by the server */
   int rtspversion;        /* the RTSP version*10 reported by the server */
 
